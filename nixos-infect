#! /usr/bin/env bash

# Modified version of: https://github.com/elitak/nixos-infect

# Disable SELinux
which setenforce && setenforce 0

# Install sudo
which sudo || (which yum && yum install -y sudo) \
           || (which apt-get && apt-get update && apt-get install -y sudo) \
           || true

# Create a nix user and give it sudo access
groupadd -g 1001 nix
useradd -g 1001 -u 1001 -d /home/nix -s /bin/bash -m nix
usermod -a -G wheel nix || usermod -a -G sudo nix
sed -i -e "s/^%sudo.*ALL$/%sudo   ALL=(ALL:ALL) NOPASSWD: ALL/" /etc/sudoers
sed -i -e "s/^%wheel.*ALL$/%wheel   ALL=(ALL:ALL) NOPASSWD: ALL/" /etc/sudoers
mkdir -p /nix
chown nix:nix /nix

set -e -o pipefail

makeConf() {
  # Skip everything if main config already present
  [[ -e /etc/nixos/configuration.nix ]] && return 0
  # NB <<"EOF" quotes / $ ` in heredocs, <<EOF does not
  mkdir -p /etc/nixos
  # Prevent grep for sending error code 1 (and halting execution) when no lines are selected : https://www.unix.com/man-page/posix/1P/grep
  local IFS=$'\n'
  for trypath in /root/.ssh/authorized_keys /home/centos/.ssh/authorized_keys $HOME/.ssh/authorized_keys; do
      [[ -r "$trypath" ]] \
      && keys=$(sed -E 's/^.*((ssh|ecdsa)-[^[:space:]]+)[[:space:]]+([^[:space:]]+)([[:space:]]*.*)$/\1 \3\4/' "$trypath") \
      && break
  done
  local network_import=""

  network_import="./networking.nix"
  cat > /etc/nixos/configuration.nix << EOF
{ ... }: {
  imports = [
    ./hardware-configuration.nix
    $network_import
    $NIXOS_IMPORT
  ];

  boot.cleanTmpDir = true;
  networking.hostName = "$(hostname)";
  networking.firewall.allowPing = true;
  services.openssh.enable = true;
  users.users.root.openssh.authorizedKeys.keys = [$(while read -r line; do echo -n "
    \"$line\" "; done <<< "$keys")
  ];

  systemd.services.old-root = {
    description = "Remove /old-root";
    serviceConfig = {
      Type = "simple";
      ExecStart = "/run/current-system/sw/bin/sh -c 'if [ -d /old-root ]; then rm -fr /old-root ; fi; true'";
      Restart = "on-abort";
      User = "root";
    };
    wantedBy = [ "default.target" ];
  };

  systemd.services.old-root.enable = true;
}
EOF
  cat /etc/nixos/configuration.nix

  # If you rerun this later, be sure to prune the filesSystems attr
  cat > /etc/nixos/hardware-configuration.nix << EOF
{ ... }:
{
  imports = [ <nixpkgs/nixos/modules/profiles/qemu-guest.nix> ];
  boot.loader.grub.device = "$grubdev";
  fileSystems."/" = { device = "$rootfsdev"; fsType = "ext4"; };
}
EOF

  makeNetworkingConf
}

makeNetworkingConf() {
  # XXX It'd be better if we used procfs for all this...
  local IFS=$'\n'
  eth0_name=$(ip address show | grep '^2:' | awk -F': ' '{print $2}')
  eth0_ip4s=$(ip address show dev "$eth0_name" | grep 'inet ' | sed -r 's|.*inet ([0-9.]+)/([0-9]+).*|{ address="\1"; prefixLength=\2; }|')
  gateway=$(ip route show dev "$eth0_name" | grep default | sed -r 's|default via ([0-9.]+).*|\1|')
  ether0=$(ip address show dev "$eth0_name" | grep link/ether | sed -r 's|.*link/ether ([0-9a-f:]+) .*|\1|')

#  eth1_name=$(ip address show | grep '^3:' | awk -F': ' '{print $2}')||true
#  if [ -n "$eth1_name" ];then
#    eth1_ip4s=$(ip address show dev "$eth1_name" | grep 'inet ' | sed -r 's|.*inet ([0-9.]+)/([0-9]+).*|{ address="\1"; prefixLength=\2; }|')
#    ether1=$(ip address show dev "$eth1_name" | grep link/ether | sed -r 's|.*link/ether ([0-9a-f:]+) .*|\1|')
#    interfaces1=<< EOF
#      $eth1_name = {
#        ipv4.addresses = [$(for a in "${eth1_ip4s[@]}"; do echo -n "
#          $a"; done)
#        ];
#EOF
#    extraRules1="ATTR{address}==\"${ether1}\", NAME=\"${eth1_name}\""
#  else
    interfaces1=""
    extraRules1=""
#  fi

  nameservers=($(grep ^nameserver /etc/resolv.conf | cut -f2 -d' '))
  if [ "$eth0_name" = eth* ]; then
    predictable_inames="usePredictableInterfaceNames = lib.mkForce false;"
  else
    predictable_inames="usePredictableInterfaceNames = lib.mkForce true;"
  fi
  cat > /etc/nixos/networking.nix << EOF
{ lib, ... }: {
  # This file was populated at runtime with the networking
  # details gathered from the active system.
  networking = {
    nameservers = [$(for a in "${nameservers[@]}"; do echo -n "
      \"$a\""; done)
    ];
    defaultGateway = "${gateway}";
    dhcpcd.enable = false;
    $predictable_inames
    interfaces = {
      $eth0_name = {
        ipv4.addresses = [$(for a in "${eth0_ip4s[@]}"; do echo -n "
          $a"; done)
        ];
        ipv4.routes = [ { address = "${gateway}"; prefixLength = 32; } ];
      };
      $interfaces1
    };
  };
  services.udev.extraRules = ''
    ATTR{address}=="${ether0}", NAME="${eth0_name}"
    $extraRules1
  '';
}
EOF
  #! /usr/bin/env bash
  # NB put your semi-sensitive (not posted to github) configuration in a separate
  # file and include it via this customConfig() function. e.g.:
  #  customConfig() {
  #    cat > /etc/nixos/custom.nix << EOF
  #    { config, lib, pkgs, ... }: {
  #    }
  #    EOF
  #  }
  #
  # then you can add the files in configuration.nix's imports above and run something like:
  #   cat customConfig nixos-infect | root@targethost bash
  if [[ "$(type -t customConfig)" == "function" ]]; then customConfig; fi
}

prepareEnv() {
  # $grubdev is used in makeConf()
  for grubdev in /dev/vda /dev/sda /dev/nvme0n1; do [[ -e $grubdev ]] && break; done

  # Retrieve root fs block device
  #                   (get root mount)  (get partition or logical volume)
  rootfsdev=$(mount | grep "on / type" | awk '{print $1;}')

  # DigitalOcean doesn't seem to set USER while running user data
  export USER="root"
  export HOME="/root"

  # Nix installer tries to use sudo regardless of whether we're already uid 0
  #which sudo || { sudo() { eval "$@"; }; export -f sudo; }
  # shellcheck disable=SC2174
  mkdir -p -m 0755 /nix
}

fakeCurlUsingWget() {
  # Use adapted wget if curl is missing
  which wget && { \
    curl() {
      eval "wget $(
        (local isStdout=1
        for arg in "$@"; do
          case "$arg" in
            "-o")
              echo "-O";
              isStdout=0
              ;;
            "-O")
              isStdout=0
              ;;
            "-L")
              ;;
            *)
              echo "$arg"
              ;;
          esac
        done;
        [[ $isStdout -eq 1 ]] && echo "-O-"
        )| tr '\n' ' '
      )"
    }; export -f curl; }
}

req() {
  type "$1" > /dev/null 2>&1 || which "$1" > /dev/null 2>&1
}

checkEnv() {
  # Perform some easy fixups before checking
  # TODO prevent multiple calls to apt-get update
  which dnf && dnf install -y perl-Digest-SHA # Fedora 24
  which bzcat || (which yum && yum install -y bzip2) \
              || (which apt-get && apt-get update && apt-get install -y bzip2) \
              || true
  which curl  || fakeCurlUsingWget \
              || (which apt-get && apt-get update && apt-get install -y curl) \
              || true

  [[ "$(whoami)" == "root" ]] || { echo "ERROR: Must run as root"; return 1; }

  req curl || req wget || { echo "ERROR: Missing both curl and wget"; return 1; }
  req bzcat            || { echo "ERROR: Missing bzcat";              return 1; }
  req groupadd         || { echo "ERROR: Missing groupadd";           return 1; }
  req useradd          || { echo "ERROR: Missing useradd";            return 1; }
  req ip               || { echo "ERROR: Missing ip";                 return 1; }
  req awk              || { echo "ERROR: Missing awk";                return 1; }
  req cut              || { echo "ERROR: Missing cut";                return 1; }
}

infect() {
  # Add nix build users
  # FIXME run only if necessary, rather than defaulting true
  groupadd nixbld -g 30000 || true
  for i in {1..10}; do useradd -c "Nix build user $i" -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" nixbld$i || true; done
  # TODO use addgroup and adduser as fallbacks
  #addgroup nixbld -g 30001 || true
  #for i in {1..10}; do adduser -DH -G nixbld nixbld$i || true; done

  [[ -z "$NIX_CHANNEL" ]] && NIX_CHANNEL="nixos-20.03"

  # This next weird nix user hackery is to get nix to install as root hands-free
  curl -L https://nixos.org/nix/install | su - nix -c $SHELL

  su - nix -c bash <<EOM
  source ~/.nix-profile/etc/profile.d/nix.sh
  export NIX_CHANNEL=${NIX_CHANNEL}
  nix-channel --remove nixpkgs
  nix-channel --add "https://nixos.org/channels/$NIX_CHANNEL" nixos
  nix-channel --update
EOM

  # Now naively copy the nix user profile to root user and fixup links
  cp -a /nix/var/nix/profiles/per-user/nix/ /nix/var/nix/profiles/per-user/root/
  ln -nsf /nix/var/nix/profiles/per-user/root/profile ~/.nix-profile
  mkdir -p ~/.nix-defexpr
  ln -nsf /nix/var/nix/profiles/per-user/root/channels ~/.nix-defexpr/channels

  # shellcheck disable=SC1090
  source ~/.nix-profile/etc/profile.d/nix.sh

  export NIXOS_CONFIG=/etc/nixos/configuration.nix

  # Centos has this incorrect setting of 0 here which causes the error in the next step:
  #   "error: writing to file: Operation not permitted"
  # This prevents that error:
  echo 10000 > /proc/sys/user/max_user_namespaces

  nix-env --set \
    -I nixpkgs=$HOME/.nix-defexpr/channels/nixos \
    -f '<nixpkgs/nixos>' \
    -p /nix/var/nix/profiles/system \
    -A system

  # Remove nix installed with curl | bash
  rm -fv /nix/var/nix/profiles/default*
  /nix/var/nix/profiles/system/sw/bin/nix-collect-garbage

  # Reify resolv.conf
  [[ -L /etc/resolv.conf ]] && mv -v /etc/resolv.conf /etc/resolv.conf.lnk && cat /etc/resolv.conf.lnk > /etc/resolv.conf

  # Stage the Nix coup d'Ã©tat
  touch /etc/NIXOS
  echo etc/nixos                   > /etc/NIXOS_LUSTRATE
  echo etc/resolv.conf            >> /etc/NIXOS_LUSTRATE
  echo root/.nix-defexpr/channels >> /etc/NIXOS_LUSTRATE

  rm -rf /boot.bak
  mv -v /boot /boot.bak
  /nix/var/nix/profiles/system/bin/switch-to-configuration boot
}

prepareEnv
checkEnv
makeConf
infect

if [[ -z "$NO_REBOOT" ]]; then
  reboot
fi
